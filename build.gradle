defaultTasks 'assemble'

subprojects {
    apply plugin: 'base'

    version = rootProject.version

    // Set a common build directory for all subprojects
    buildDir = "${rootProject.projectDir}/out"

    // Define variables for common directory, loose directory, and root project files
    def commonDir = "${rootProject.projectDir}/${project.findProperty('commonDir') ?: 'common'}"
    def looseDir = "${buildDir}/${project.findProperty('looseDir') ?: 'loose'}/${project.name}"
    def rootProjectFiles = project.findProperty('rootProjectFiles')?.split(',') ?: []
    def excludePatterns = project.findProperty('excludePatterns')?.split(',') ?: []

    // Define a sync task in each subproject
    tasks.register('syncLoose', Sync) {
        includeEmptyDirs = false
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        // Include files from the project directory
        from(projectDir)
        // Include files from the common directory
        from(commonDir)
        // Include files specified in the rootProjectFiles property
        rootProjectFiles.each { fileName ->
            from("${rootProject.projectDir}/${fileName.trim()}")
        }
        // Set the destination directory for the sync task
        into looseDir

        // Exclude unnecessary files
        excludePatterns.each { pattern ->
            exclude pattern.trim()
        }
    }

    // Define a zip task in each subproject
    tasks.register('zipPack', Zip) {
        includeEmptyDirs = false
        group = 'Build'
        description = "Builds the resource pack for MC version ${project.name}."

        // Set the output file name "$rootProjectName-MC$projectName-v$rootProjectVersion.zip"
        archiveBaseName.set(rootProject.name)
        archiveAppendix.set(project.findProperty('archiveAppendix') ?: "MC${project.name}")
        archiveVersion.set(project.findProperty('archiveVersion') ?: "v${rootProject.version}")
        archiveClassifier.set(project.findProperty('archiveClassifier') ?: '')
        archiveExtension.set('zip')

        // Set the destination directory for the zip task
        destinationDirectory.set(buildDir)

        // Include the output of the syncLoose task
        from(tasks.named('syncLoose'))
        // Ensure syncLoose runs before zipping
        dependsOn tasks.named('syncLoose')
    }

    // Add the zip task to the default tasks
    tasks.named('assemble').configure {
        dependsOn tasks.named('zipPack')
    }
}
